# темы которые как бы дополнительные и не входят в курс сололёрна
# https://www.youtube.com/watch?v=RipfqbH0eqY - геттеры и сеттеры
# РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ - строка которая задает шаблон поиска в каком то тексте
import re
s = "AC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DC"
result = re.match("AC/DC", s) # метод match, первым параметром как раз таки принимает регулярное выражение, а вторым строку в которой надо искать
# match ищет сходстав только начиая с начала нашей стркоки, если возвращает <re.Match object; span=(0, 5), match='AC/DC'>, а если не нашел, то None
result = re.search("DC", s) # метод search, используется для поиска элемента по всей строке но взорвщаает только первый совпавший элемент
result = re.findall("DC", s) # метод findall, ищет все элементы в строке и выводит их в спискеб отсюда можем узнать кол-во совпавших элементов
result = re.split("/", s, maxsplit=3) # метод split, то же самое что и обычный split() разбивает строку по опереденным знакам и возвращает список
# maxsplit - кол-во раз которое мы максимальн
result = re.sub("A", "D", s) # метод sub, заменяет все первые подстроки на вторые
result = re.fullmatch("A", s) # проверяет схожа ли строка из первого аргумента со строкой во втором

# print(result) # у самой переменной result есть так же методы span, который выводит индексы в которых лежит совпадение 


# ЗАЧАСТУЮ регулярные выржаения используют не когда нам нужно найти какую то конткретную подстроку а когда нужно найти набор символов отвечающий определнным правилам
string = "87+684654   --- keljfkldsfjkdskj*7 SDFJKLSDFLKJSlffffffggg"
# когда мы пишем шаблон для регулярки нужно исользовать сырую строку начинается с r""
# сырая строка - в которой отключенно экранирование (когда мы можем форматировать строку по типу \t - табуляция в сырой строке это работать уже не будет),
# нужно это для того чтобы полноценно воспользоваться всеми шаблонами которые нам нужны

# ОДИНОЧНЫЕ ШАБЛОНЫ
# шаблон 1: .
# точка заменяет один любой символ кроме симола новой строки \n (переход на новую строку)
res = re.search(r"k.l", string) # <re.Match object; span=(16, 19), match='kel'>

# шаблон 2: \d и \D
# \d выводит любую цифру \D выведет любой символ кроме цифры
res = re.search(r"\D", string)

# шаблон 3: \s
# \s выводит любой пробельный символ \S вернет любой НЕ пробельный символ
# пробельный символ (табуляция пробел и тд)
res = re.search(r"\s", string)


# шаблон 4: \w
# \w - любая буква цифра или нижнее подчеркивание, \W соотвестенно обратное 
res = re.search(r"\w", string)

# шаблон 5: \b
# \b - указывает начало или конец какого либо слова, а \B выведет что то что находится не на границе слова, типл в обратном случае None
res = re.search(r"\Blel", string)

# шаблон 6: *
# * - показыает 0 или более вхождений после какой то первого найденного символа, а + 1 или более вхождени псле какого то первого найденного символа
res = re.search(r"\d*", string)
 
print(res)

# шаблон 7: []
# [] - мы передаем опреленный набор символов и когда встречается один символ из этого набора он выводитс
# res = re.search(r"[ghkjd]") так же работает с диапазонами чисел
res = re.search(r"[^4-8]", string) # ^ добавляется к диапазону когда мы хотим вывести все кроме этого диапазона

# шаблон 8: |
res = re.search(r"H|f", string) # выведет или первый или  второй элемент и так как мы исползуем search то выведет то что найдет первее

# КВАНТИФИКАТОРЫ
res = re.search(r"\d{3}", string)
# квантификатор может принимать вид:
# - кол-ва раз которые мы повторяем определенный шаблон
# - диапазона на который мы применяем определнный шаблон (так же тут если не указывать первую или вторую границу диапазона то мы полчим не менее или не более этих значений)
# например: res = re.search(r"\d{4,}") или res = re.search(r"\d{,4}")

# ПРИМЕР ИСПОЛЬЗОВАНИЯ РЕГУЛЯРНОГО ВЫРАЖЕНИЯ
words = "Привет! Как дела? А у меня нормально."

resultat = re.findall(r"[]")