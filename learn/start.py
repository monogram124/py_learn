# основы основ

print("Hello world!") # вывод информации
 
# вычисления
# +, -
# /, * (деление выводит данные в типе float)
# // - целочисленное деление (выводит данные в типе int)
# % - деление с остатком 
# ** - возведение в степень

print("Это" + " " + "конкатенация") # всё точно так же как в js

name = "Макс"

print("Привет", name) # множественный вывод
print("Железный", "Человек", sep="-") # сепаратор, разделяет выводимую информацию

# переменные, можно присвоить любой тип значения
points = 15
print(points)

# переназначение, можно переназначать сколько угодно раз
x = 15
x = 43
print(x)

# вывод, даже если введено число оно обрабатывается как строка
x = input()
print(x)

# преобразование в другой тип данных
age = int(input("Целое"))
height=  int(input("Целое"))
age = 42
# str = "his age is" + str(age)

# множественные выводы, просто использование input() на нескольких строчках

# операции на месте, отличается от js тем что можно использовать для любых числовых операций
a = 2
a -= 2
a /= 3
a **= 5

# так же дял конкатенации
word = "egg"
word += "s"
print(word)

bill = int(input("Число целое"))

bill *= 0,2
print(bill)


# Управляющие конструкции

# Boolean соответственно как в js True и False (с заглавной буквы!)
# == - оператор равенства, с помощью него можно создать логический тип путем сравнения

print(2 == 3)
print("hello" == "hello") 

# больше меньше равно не равно больше или равно меньше или равно, всё точно так же как в js

b = 7
print(b != 8)
print(b > 5)
print(b < 2)
print("a" > "b")

# сравнение строк тоже возможно
# Boolean значения могут быть представлены в виде int()

# if condiditon:
#    statments

num2 = 42
num3 = 456

num2 = str(num2)

if num2 == 42:
    print(num2 + " действительно равно 42")
    if num3 >= 45:
        print(num3 + " действительно больше или равен 45")

# else
number = 4
if number == 5:
    print("Yes")
else:
    print("No")

# elif, сокращенно от if else как в js

num4 = 3
if num4 == 1:
    print("One")
elif num4 == 2:
    print("Two")
elif num4 == 3:
    print("Three")

# оператор and == &&, то есть логическое и 
print(1 == 1 and 2 == 2)
print(1 != 1 and 2 > 2)

# оператор or == ||, то есть логическое или
print(1 == 1 or 2 == 2)
print(1 != 1 or 2 == 2)

# оператор not, то есть логическое нет, то есть восклицательный знак в условиях js
print(not 1 == 1)
False
print(not 1 > 7)
True

country = "US"
age = 42

if(country == "US" or country == "GB") and (age > 0 and age < 100):
    print("cool")

# while, ну всё точно так же как в js, условие выполняется пока не станет false, то есть пока равно true
i = 1
while i <= 5:
    if i % 2 == 0: # все операторы внутри цикла сопровождаются табулциями
        print(i) 
    i += 1
    if i == 4:
        print("Breaking")
        break # останавливает цикл, можно использовать для выхода из бесконечных циклов
    else:
        continue # возвращает цикл на одну итерацию назад

print("Finished!")

# списки, могут содержать различные типы данных и другие массивы

words = ["Hello", "world", "!"]
print(words[1])

m = [
    [1, 2, 3],
    [4, 5, 6]
] # это мартица, можно получить значение используя такую запись:
print(m[0][2]) # выведет 3, указываем строку и столбец

# строки как и в js могут быть проиндексированы 
str = "Python" 
print(str[0]) # P

# переназначение
words[0] = 42
# складывание
nums = [1, 2, 3]
nums += [4, 5, 6]
print(nums)

x = [2, 4]
x *= 3 
print(x) # [2, 4, 2, 4, 2, 4]

# in
vegetables = ["carrot", "tomato", "potato"]
print("carrot" in vegetables) # True
print("lemon" in vegetables) # False

phrase = "Hello world!"
if "world" in x:
    print("Yes")
else:
    print("No")

# так же можно проверить элемента нет в списке
if not "Hi" in phrase:
    print("There is no Hi in phrase")


# FOR, так же как в js переменная обозначенная в голове цикла принимает значение текующего элемента списка

words = ["hello", "hi", "welcome"]

for word in words:
    word += "!"

# обход строк
string = "for loops"
count = 0

for char in string:
    if char == "o":
        count += 1

# операторы break и continiue работают точно так же как в while

# ДИАПАЗОНЫ range()
numbers = list(range(10))

# для того чтобы вывести диапазон в список преобразуем его с помощью функции list()
# если range вызван с одним аргументом, создаст диапазон от нуля до аргумента, а если с двумя, то от одного аргумента к другому

# так же есть третий аргумент, шаг, он определяет интервал последовательности, чтобы идти в обратном направлении просто делаем шаг отрицательным
range = range(5, 20, 2)

# диапазоны используются в циклах for
for i in range(5):
    print("hello")
# срезы списков
digits = [0, 1, 4, 9, 16, 25]
print(digits[1:3])

digits[::2] # каждое второе
digits[1:5:3] # каждое третье между индексами 1 и 5

digits = digits[::-1] # разворот списка

# еслли первое число среза опущено, им будет являтся начало среза => если второе число опущено то им будет считаться конец

# ФУНКЦИИ

# append() - добавить элемент в конец списка
list = [1, 2, 3, 4, 5]

list.append(6) # добавялет в конец списка 6-ку
print(len(list)) # длина list

# insert() - добавяет элемент в список по указану индексу
list.insert(1, 1.1) # list = [1, 1.1, 2, 3, 4, 5, 6]

# index() = indexOf() в js 
list.index(1.1) # 2

# min() и max() возвращают максимальное и минимальное значение в списке
max(list) # 6
min(list) # 1

# count() возвращает кол-во раз которое элемент встречается в списке
list.count(1) # 1

# remove() удаляет элемент из списка
list.remove(1.1) # list = [1, 2, 3, 4, 5, 6]

# reverse() разворачивает список
list.reverse() # list = [6, 5, 4, 3, 2, 1]

# СТРОКИ И ИХ ФУНКЦИИ

# format() форматирование строк и заполнители, заполнитель с помощью метода format вставляет в строку аргумент

stroka = "Hello, my name is {0}".format("Maxim") # stroka = "Hello, my name is Maxim"

# заполнителю можно дать имя а не только числовое значние
stroka = "Learning, {lang} is fun".format(lang = "Python")

# join() объеденяет все элементы списка в строку с разделителем указаным до метода, результатом join() всегда является строка

", ".join(["eggs", "apple", "milk"]) # eggs, apple, milk

# split() - противоположность join, превращает строку с опеределенным разделителем в список

string = "some text here"
x = str.split(" ") # [some, text, here]

# replace, замена одной подстроки на другую
y = "Hello ME"
y.replace("ME", "World") # первым аргументом принимает что заменить вторым на что

# lower(), upper() функции переводящие строку из нижнего в верхнйий регистр и наоборот
print("this is some sentence".upper()) # THIS IS SOME SENTENCE
print("THIS IS SOME SENTENCE".lower()) # this is some sentence

# свои функции
def func(n):
    return (n-2)*180